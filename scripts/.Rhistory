# Check if the denominator is 0
if (total_males == 0) {
male_ratio == 0
} else {
# Calculate ratio and round the result
male_ratio <- round(total_survived_males / total_males * 100, digits = 0)
}
# Selecting children and females
children_and_females <- ticket_class[ticket_class$Age == "Child" |
ticket_class$Sex == "Female", ]
# Total number of children and females
total_children_and_females <- sum(children_and_females$Freq)
# children and females that survived
survived_children_and_females <- children_and_females[
children_and_females$Survived == "Yes",
]
# Total number of children and females that survived
total_survive_child_female <-
sum(survived_children_and_females$Freq)
children_and_females_ratio <- 1
# Check if the denominator is 0
if (total_children_and_females == 0) {
children_and_females_ratio <- 0
} else {
# Calculate ratio and round the result
children_and_females_ratio <- round(total_survive_child_female /
total_children_and_females * 100,
digits = 0
)
}
return(paste0(
"Of ", class, " class, ", children_and_females_ratio,
"% of women and children survived and ", male_ratio,
"% of men survived."
))
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class and the `titanic_df` data frame
# to your `survival_rate` function
first_survived <- survival_rate("1st", titanic_df)
second_survived <- survival_rate("2nd", titanic_df)
third_survived <- survival_rate("3rd", titanic_df)
crew_survived <- survival_rate("Crew", titanic_df)
# What notable differences do you observe in the survival rates across classes?
# Note at least 2 observations.
# 1. Passengers of third class has the lowest survival rate.
# 2. Passengers of first class has the highest survival rate.
# What notable differences do you observe in the survival rates between the
# women and children versus the men in each group?
# Note at least 2 observations.
# 1. The survival rate of women and child is higher than men.
# 2. The average difference between the survival rates of women and children
# versus the men is about 59%.
### Reading in Data ###########################################################
# In this section, you'll work with .csv data of life expectancy by country
# First, download the csv file of `Life Expectancy` data from GapMinder:
# https://www.gapminder.org/data/
# You should save the .csv file into your `data` directory
# Before getting started, explore the GapMinder website to better understand
# the *original* source of the data (e.g., who calculated these estimates)
# Place a brief summary of the each data source here (e.g., 1 - 2 sentences
# per data source)
# The first source is from v7, by Mattias Lindgren, which is based on 100
# sources compiled by Mattias Lindgren. The second and third source are from
# IHME and UN respectively.
# Using the `read.csv` function, read the life_expectancy_years.csv file into
# a variable called `life_exp`. Make sure not to read strings as factors
life_exp <- read.csv("data/life_expectancy_years.csv")
# Write a function `get_col_mean()` that takes a column name and a data frame
# and returns the mean of that column. Make sure to properly handle NA values
# Hint: `mean()` takes in an argument called `na.rm`
get_col_mean <- function(col_name, df) {
result <- mean(df[[col_name]], na.rm = TRUE)
return(result)
}
# Create a list `col_means` that has the mean value of each column in the
# data frame (except the `Country` column). You should use your function above.
# Hint: Use an `*apply` function (lapply, sapply, etc.)
col_means <- lapply(
colnames(life_exp)[2:ncol(life_exp)], get_col_mean,
life_exp
)
# Create a variable `avg_diff` that is the difference in average country life
# expectancy between 1800 and 2018
avg_diff <- get_col_mean("X2018", life_exp) - get_col_mean("X1800", life_exp)
# Create a column `life_exp$change` that is the change in life
# expectancy from 2000 to 2018. Increases in life expectancy should
# be *positive*
change <- life_exp$X2018 - life_exp$X2000
life_exp <- cbind(life_exp, change)
# Create a variable `most_improved` that is the *name* of the country
# with the largest gain in life expectancy. Make sure to filter NA values
# Hint: `max()` takes in an argument called `na.rm`
change_over_time <- life_exp[, ncol(life_exp) - 1] - life_exp[, 2]
life_exp <- cbind(life_exp, change_over_time)
most_improved <- life_exp[life_exp$change_over_time ==
max(change_over_time, na.rm = TRUE) &
!is.na(life_exp$change), ]$誰..country
life_exp <- subset(life_exp, select = -change_over_time)
# Create a variable `num_small_gain` that has the *number* of countries
# whose life expectance has improved less than 1 year between 2000 and 2018
# Make sure to filter NA values
# Hint: Lookup `is.na()`
num_small_gain <- nrow(life_exp[life_exp$change < 1 &
!is.na(life_exp$change), ])
# Write a function `country_change()` that takes in a country's name,
# two years as numbers (not strings), and the `life_exp` data frame
# Parameters should be written *in the above order*
# It should return the phrase:
# "Between YEAR1 and YEAR2, the life expectancy in COUNTRY went DIRECTION by
# SOME_YEARS years".
# Make sure to properly indictate the DIRECTION as "up" or "down"
# Hint: Use an if/else statement to help compute DIRECTION
country_change <- function(country_name, year1, year2, df) {
col1 <- paste0("X", year1)
col2 <- paste0("X", year2)
target_country <- df[df$誰..country == country_name, ]
diff <- target_country[[col2]] - target_country[[col1]]
direction <- "defult"
if (diff > 0) {
direction <- "up"
} else if (diff < 0) {
direction <- "down"
}
return(paste0(
"Between ", year1, " and ", year2, ", the life expectancy in ",
country_name, " went ", direction, " by ",
round(diff, digits = 1), " years."
))
}
# Using your `country_change()` function, create a variable `sweden_change`
# that is the change in life expectancy from 1960 to 1990 in Sweden
sweden_change <- country_change("Sweden", 1960, 1990, life_exp)
# Write a function `compare_change()` that takes in two country names and your
# `life_exp` data frame as parameters, and returns a sentence that describes
# their change in life expectancy from 2000 to 2018 (the `change` column)
# For example, if you passed the values "China", and "Bolivia" to you function,
# It would return this:
# "The country with the bigger change in life expectancy was China (gain=6.9),
#  whose life expectancy grew by 0.6 years more than Bolivia's (gain=6.3)."
# Make sure to round your numbers to one digit (though only after calculations)
# Hint: Use an if/else statement to paste the countries in the correct order
compare_change <- function(country1, country2, df) {
country1_change <- df[df$誰..country == country1, ]$change
country2_change <- df[df$誰..country == country2, ]$change
difference <- 0
if (country1_change > country2_change) {
difference <- country1_change - country2_change
return(paste0(
"The country with the bigger change in life expectancy was ",
country1, "(gain=", round(country1_change, digits = 1),
"), whose life expectancy grew by ", difference,
" years more than", country2, "(gain=", round(country2_change,
digits = 1
),
" )."
))
} else {
difference <- country2_change - country1_change
return(paste0(
"The country with the bigger change in life expectancy was ",
country2, "(gain=", round(country2_change, digits = 1),
"), whose life expectancy grew by ", difference,
" years more than ", country1, "(gain=",
round(country1_change, digits = 1), ")."
))
}
}
# Using your `bigger_change()` function, create a variable `usa_or_france`
# that describes who had a larger gain in life expectancy (the U.S. or France)
usa_or_france <- compare_change("United States", "France", life_exp)
# Write your `life_exp` data.frame to a new .csv file to your
# data/ directory with the filename `life_exp_with_change.csv`.
# Make sure not to write row names.
write.csv(life_exp, "data/life_exp_with_change.csv", row.names = FALSE)
# Assignment 3: Using Data
#
# Before you get started:
# - Set your working directory to "source file location" using the Session menu
# - Run the following line of code to delete all variables in your workspace
#     (This will make it easier to test your script)
rm(list = ls())
# In this section, you'll work with the variable `Titanic`, a data set which is
# built into the R environment.
# This data set actually loads in a format called a *table*
# See https://cran.r-project.org/web/packages/data.table/data.table.pdf
# Use the `is.data.frame()` function to test if it is a table.
is.data.frame(Titanic)
# Create a variable `titanic_df` by converting `Titanic` into a data frame;
# you can use the `data.frame()` function or `as.data.frame()`
# Hint: Be sure to **not** treat strings as factors!
titanic_df <- data.frame(Titanic)
# Create a variable `children` that is a data frame containing only the rows
# from `titanic_df` with information about children on the Titanic
# Hints:
# - Filter rows using a vector of boolean values (like vector filtering)
# - See chapter 10.2.3
children <- titanic_df[titanic_df$Age == "Child", ]
# Create a variable `num_children` that is the total number of children.
# Hint: Remember the `sum()` function!
num_children <- sum(children$Freq)
# Create a variable `most_lost` that is the *row* from `titanic_df` with the
# largest absolute number of losses (people who did not survive)
# You can use multiple lines of code if you find that helpful
# to create this variable
# Hint: Filter for those who did not survive, then look for the row
did_not_survive <- titanic_df[titanic_df$Survived == "No", ]
most_lost <- did_not_survive[did_not_survive$Freq ==
max(did_not_survive$Freq), ]
# This is a complicated function! We recommend the following approach:
# - Filter for all rows representing the given ticketing class and save the
#   new data frame to a variable
# - Using this data frame, filter for all rows representing Adult Males
# - Find the total number of men and total number of male survivors to
#   calculate the survival rate
# - Likewise, use the data frame to filter for all Children and Adult Females
# - Perform the above calculation for this group as well
#
# Other approaches are also acceptable, please comment to explain what you do!
survival_rate <- function(class, titanic_df) {
# Filter class
ticket_class <- titanic_df[titanic_df$Class == class, ]
# Select adult males
adult_males <- ticket_class[ticket_class$Sex == "Male" &
ticket_class$Age == "Adult", ]
# Total adult males
total_males <- sum(adult_males$Freq)
# Adult males that survived
survived_males <- adult_males[adult_males$Survived == "Yes", ]
# Total adult males that survived
total_survived_males <- sum(survived_males$Freq)
male_ratio <- 1
# Check if the denominator is 0
if (total_males == 0) {
male_ratio == 0
} else {
# Calculate ratio and round the result
male_ratio <- round(total_survived_males / total_males * 100, digits = 0)
}
# Selecting children and females
children_and_females <- ticket_class[ticket_class$Age == "Child" |
ticket_class$Sex == "Female", ]
# Total number of children and females
total_children_and_females <- sum(children_and_females$Freq)
# children and females that survived
survived_children_and_females <- children_and_females[
children_and_females$Survived == "Yes",
]
# Total number of children and females that survived
total_survive_child_female <-
sum(survived_children_and_females$Freq)
children_and_females_ratio <- 1
# Check if the denominator is 0
if (total_children_and_females == 0) {
children_and_females_ratio <- 0
} else {
# Calculate ratio and round the result
children_and_females_ratio <- round(total_survive_child_female /
total_children_and_females * 100,
digits = 0
)
}
return(paste0(
"Of ", class, " class, ", children_and_females_ratio,
"% of women and children survived and ", male_ratio,
"% of men survived."
))
}
# Create variables `first_survived`, `second_survived`, `third_survived` and
# `crew_survived` by passing each class and the `titanic_df` data frame
# to your `survival_rate` function
first_survived <- survival_rate("1st", titanic_df)
second_survived <- survival_rate("2nd", titanic_df)
third_survived <- survival_rate("3rd", titanic_df)
crew_survived <- survival_rate("Crew", titanic_df)
# Using the `read.csv` function, read the life_expectancy_years.csv file into
# a variable called `life_exp`. Make sure not to read strings as factors
life_exp <- read.csv("data/life_expectancy_years.csv")
# Write a function `get_col_mean()` that takes a column name and a data frame
# and returns the mean of that column. Make sure to properly handle NA values
# Hint: `mean()` takes in an argument called `na.rm`
get_col_mean <- function(col_name, df) {
result <- mean(df[[col_name]], na.rm = TRUE)
return(result)
}
# Create a list `col_means` that has the mean value of each column in the
# data frame (except the `Country` column). You should use your function above.
# Hint: Use an `*apply` function (lapply, sapply, etc.)
col_means <- lapply(
colnames(life_exp)[2:ncol(life_exp)], get_col_mean,
life_exp
)
# Create a variable `avg_diff` that is the difference in average country life
# expectancy between 1800 and 2018
avg_diff <- get_col_mean("X2018", life_exp) - get_col_mean("X1800", life_exp)
install.packages("dplyr")
install.packages("tidyr")
unite
?max
install.packages("pscl")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(tidyr)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
View(outcome)
?unite
install.packages("dplyr")
library(usmap)
library(ggplot2)
library(dplyr)
library(plotly)
library(leaflet)
library(maps)
library(tidyverse)
library(sf)
install.packages("sf")
install.packages("sf")
library(sf)
install.packages("Rcpp")
install.packages("Rcpp")
setwd("C:/Users/Russell/Desktop/Info 201/final-project-group-3/app")
shiny::runApp()
setwd("C:/Users/Russell/Desktop/Info 201/final-project-group-3/app")
runApp()
runApp()
runApp()
shiny::runApp()
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyr)
library(plotly)
library(lintr)
library(DT)
# race plot
race_df <- read.csv("../data/race_ethnicity_of_people_fully_vaccinated.csv",
strip.white = F, sep = ",")
race_df <- race_df %>% setNames(c("Race", "Percent_Fully_Vaccinated", "a", "b", "c", "d"))
race_plot <- plot_ly(race_df,
x = ~Race, y = ~Percent_Fully_Vaccinated, type = "bar",
orientation = "w",
name = "female",
marker = list(
color = "#f5580a",
line = list(
size = 100,
color = "#f5580a",
width = 1
)
race_plot
#age plot
age_df <- read.csv("../data/age_groups_of_people_fully_vaccinated.csv",
header = TRUE, strip.white = F, sep = ",")
age_df <- age_df %>% rename("Percent_of_People_Fully_Vaccinated" = "X..Persons.Fully.Vaccinated",
"Age" = "Age.Group")
theme_set(theme_bw())
age_plot <- ggplot(data = age_df, mapping = aes(x = Age, y = Percent_of_People_Fully_Vaccinated, group = 1)) +
geom_line(linetype = "dashed", size = 1, color = "#0099f9") +
geom_point(size = 3, color = "#105fef") +
theme(
axis.title.x = element_text(color = "#105fef", size = 16, face = "italic"),
axis.title.y = element_text(color = "#105fef", size = 16, face = "italic")
)
ggplotly(age_plot)
#bar chart (gender plot)
bar_chart <- function(sex_df){
sex <- c(
"Persons Fully Vaccinated", "US Population",
"Persons completed vaccination in Last 14 Days"
)
female <- c(52.9, 50.8, 50.8)
male <- c(47.1, 49.2, 49.2)
data_1 <- sex_df <- data.frame(sex, female, male)
fig_sex <- plot_ly(data_1,
x = ~female, y = ~sex, type = "bar",
orientation = "h",
name = "female",
marker = list(
color = "#17becf",
line = list(
size = 100,
color = "#17becf",
width = 1
)
fig_sex <- fig_sex %>% add_trace(
x = ~male, name = "male",
marker = list(
size = 100,
color = "#7f7f7f",
line = list(
color = "#7f7f7f",
width = 1
)
fig_sex <- fig_sex %>% layout(title = "Gender Vaccination Status",
barmode = "stack",
xaxis = list(domain = c(0.01, 3), scleratio = 0.1, title = "gender"),
yaxis = list(domain = c(0.01, 3), scleratio = 0.1, title = "percentage")
)
return(fig_sex)
}
setwd("~/info 201 Sum/final-project-group-3/scripts")
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyr)
library(plotly)
library(lintr)
library(DT)
# race plot
race_df <- read.csv("../data/race_ethnicity_of_people_fully_vaccinated.csv",
strip.white = F, sep = ",")
race_df <- race_df %>% setNames(c("Race", "Percent_Fully_Vaccinated", "a", "b", "c", "d"))
race_plot <- plot_ly(race_df,
x = ~Race, y = ~Percent_Fully_Vaccinated, type = "bar",
orientation = "w",
name = "female",
marker = list(
color = "#f5580a",
line = list(
size = 100,
color = "#f5580a",
width = 1
)
race_plot
#age plot
age_df <- read.csv("../data/age_groups_of_people_fully_vaccinated.csv",
header = TRUE, strip.white = F, sep = ",")
age_df <- age_df %>% rename("Percent_of_People_Fully_Vaccinated" = "X..Persons.Fully.Vaccinated",
"Age" = "Age.Group")
theme_set(theme_bw())
age_plot <- ggplot(data = age_df, mapping = aes(x = Age, y = Percent_of_People_Fully_Vaccinated, group = 1)) +
geom_line(linetype = "dashed", size = 1, color = "#0099f9") +
geom_point(size = 3, color = "#105fef") +
theme(
axis.title.x = element_text(color = "#105fef", size = 16, face = "italic"),
axis.title.y = element_text(color = "#105fef", size = 16, face = "italic")
)
ggplotly(age_plot)
#bar chart (gender plot)
bar_chart <- function(sex_df){
sex <- c(
"Persons Fully Vaccinated", "US Population",
"Persons completed vaccination in Last 14 Days"
)
female <- c(52.9, 50.8, 50.8)
male <- c(47.1, 49.2, 49.2)
data_1 <- sex_df <- data.frame(sex, female, male)
fig_sex <- plot_ly(data_1,
x = ~female, y = ~sex, type = "bar",
orientation = "h",
name = "female",
marker = list(
color = "#17becf",
line = list(
size = 100,
color = "#17becf",
width = 1
)
fig_sex <- fig_sex %>% add_trace(
x = ~male, name = "male",
marker = list(
size = 100,
color = "#7f7f7f",
line = list(
color = "#7f7f7f",
width = 1
)
fig_sex <- fig_sex %>% layout(title = "Gender Vaccination Status",
barmode = "stack",
xaxis = list(domain = c(0.01, 3), scleratio = 0.1, title = "gender"),
yaxis = list(domain = c(0.01, 3), scleratio = 0.1, title = "percentage")
)
return(fig_sex)
}
View(age_plot)
race_plot <- plot_ly(race_df,
x = ~Race, y = ~Percent_Fully_Vaccinated, type = "bar",
orientation = "w",
name = "female",
marker = list(
color = "#f5580a",
line = list(
size = 100,
color = "#f5580a",
width = 1
)
race_plot
#age plot
age_df <- read.csv("../data/age_groups_of_people_fully_vaccinated.csv",
header = TRUE, strip.white = F, sep = ",")
age_df <- age_df %>% rename("Percent_of_People_Fully_Vaccinated" = "X..Persons.Fully.Vaccinated",
"Age" = "Age.Group")
theme_set(theme_bw())
age_plot <- ggplot(data = age_df, mapping = aes(x = Age, y = Percent_of_People_Fully_Vaccinated, group = 1)) +
geom_line(linetype = "dashed", size = 1, color = "#0099f9") +
geom_point(size = 3, color = "#105fef") +
theme(
axis.title.x = element_text(color = "#105fef", size = 16, face = "italic"),
axis.title.y = element_text(color = "#105fef", size = 16, face = "italic")
)
ggplotly(age_plot)
